import type { LoaderWithParser } from '@loaders.gl/loader-utils';
import type { OBJLoaderOptions } from './obj-loader';
import { OBJLoader as OBJWorkerLoader } from './obj-loader';
import type { MTLLoaderOptions } from './mtl-loader';
export { OBJWorkerLoader };
/**
 * Loader for the OBJ geometry format
 */
export declare const OBJLoader: {
    parse: (arrayBuffer: ArrayBuffer, options?: OBJLoaderOptions) => Promise<{
        /**
         * Loader for the MTL material format
         */
        loaderData: {
            header: {};
        };
        schema: import("@loaders.gl/schema").Schema;
        header: {
            vertexCount: number;
            boundingBox: [[number, number, number], [number, number, number]];
        };
        mode: number;
        attributes: import("@loaders.gl/schema").MeshAttributes;
    }>;
    parseTextSync: (text: string, options?: OBJLoaderOptions) => {
        /**
         * Loader for the MTL material format
         */
        loaderData: {
            header: {};
        };
        schema: import("@loaders.gl/schema").Schema;
        header: {
            vertexCount: number;
            boundingBox: [[number, number, number], [number, number, number]];
        };
        mode: number;
        attributes: import("@loaders.gl/schema").MeshAttributes;
    };
    name: string;
    id: string;
    module: string;
    version: any;
    worker: boolean;
    extensions: string[];
    mimeTypes: string[];
    testText: (text: string) => boolean;
    options: {
        obj: {};
    };
};
/**
 * Loader for the MTL material format
 */
export declare const MTLLoader: {
    parse: (arrayBuffer: ArrayBuffer, options?: MTLLoaderOptions) => Promise<import("./lib/parse-mtl").MTLMaterial[]>;
    parseTextSync: (text: string, options?: MTLLoaderOptions) => import("./lib/parse-mtl").MTLMaterial[];
    name: string;
    id: string;
    module: string;
    version: any;
    worker: boolean;
    extensions: string[];
    mimeTypes: string[];
    testText: (text: string) => boolean;
    options: {
        mtl: {};
    };
};
export declare const _typecheckOBJLoader: LoaderWithParser;
export declare const _typecheckMTLLoader: LoaderWithParser;
//# sourceMappingURL=index.d.ts.map